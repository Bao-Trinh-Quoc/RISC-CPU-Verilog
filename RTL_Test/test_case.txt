-------------------- TC-01 --------------------
| Description: Test functionality of ADD, LDA |
| and STO.                                    |
-----------------------------------------------
    ~~~ Test machine code ~~~
    LDA 20
    ADD 21
    STO 22
    HLT
    ~~~ Memory section ~~~
    0x00: 0xB4
    0x01: 0x55
    0x02: 0xD6
    0x03: 0x00
    0x14: 5 (decimal)
    0x15: 3 (decimal)

    ~~~ Verilog Code ~~~
    dut.mem._memory[0] = 8'b101_10100;  // LDA 20 (Load from addr 20)
    dut.mem._memory[1] = 8'b010_10101;  // ADD 21 (Add value from addr 21)
    dut.mem._memory[2] = 8'b110_10110;  // STO 22 (Store to addr 22)
    dut.mem._memory[3] = 8'b000_00000;  // HLT

    dut.mem._memory[20] = 8'h05;        // First operand
    dut.mem._memory[21] = 8'h03;        // Second operand
    
    // Expected output: "Test Passed: Correct result stored in memory"
    // Output:          "Test Passed: Correct result stored in memory"

----------------------------------- ~~~~~~~~~~~~~~~ -----------------------------------

-------------------- TC-02 --------------------
| Description: Test functionality of AND, LDA |
| and STO.                                    |
-----------------------------------------------
    ~~~ Test machine code ~~~
    LDA 27
    AND 28
    STO 29
    HLT
    ~~~ Memory section ~~~
    0x00: 0xBB
    0x01: 0x7C
    0x02: 0xDD
    0x03: 0x00
    0x1B: 3 (decimal)
    0x1C: 7 (decimal)

    ~~~ Verilog Code ~~~
    dut.mem._memory[0] = 8'b101_11011;  // LDA 27 (Load from addr 27)
    dut.mem._memory[1] = 8'b011_11100;  // AND 28 (Add value from addr 28)
    dut.mem._memory[2] = 8'b110_11101;  // STO 29 (Store to addr 29)
    dut.mem._memory[3] = 8'b000_00000;  // HLT

    dut.mem._memory[27] = 8'h03;        // First operand
    dut.mem._memory[28] = 8'h07;        // Second operand
    
    // Expected output: "Test Passed: Correct result stored in memory"
    // Output:          "Test Passed: Correct result stored in memory"

----------------------------------- ~~~~~~~~~~~~~~~ -----------------------------------

-------------------- TC-03 --------------------
| Description: Test functionality of XOR, LDA |
| and STO.                                    |
-----------------------------------------------
    ~~~ Test machine code ~~~
    LDA 25
    AND 26
    STO 27
    HLT
    ~~~ Memory section ~~~
    0x00: 0xB9
    0x01: 0x9A
    0x02: 0xDB
    0x03: 0x00
    0x19: 42 (decimal)
    0x1A: 32 (decimal)

    ~~~ Verilog Code ~~~
    dut.mem._memory[0] = 8'b101_11001;  // LDA 25 (Load from addr 25)
    dut.mem._memory[1] = 8'b100_11010;  // AND 26 (Add value from addr 26)
    dut.mem._memory[2] = 8'b110_11011;  // STO 27 (Store to addr 27)
    dut.mem._memory[3] = 8'b000_00000;  // HLT

    dut.mem._memory[25] = 8'h2a;        // First operand
    dut.mem._memory[26] = 8'h20;        // Second operand
    
    // Expected output: "Test Passed: Correct result stored in memory"
    // Output:          "Test Passed: Correct result stored in memory"

----------------------------------- ~~~~~~~~~~~~~~~ -----------------------------------

-------------------- TC-04 --------------------
| Description: Test functionality of JMP, LDA,|
| STO and XOR.                                |
-----------------------------------------------
    ~~~ Test machine code ~~~
    LDA 25
    JMP 05
    ADD 26
    XOR 26
    AND 26
    LDA 26
    XOR 27
    STO 28
    HLT
    ~~~ Memory section ~~~
    0x00: 0xB9
    0x01: 0xE5
    0x02: 0x5A
    0x03: 0x9A
    0x04: 0x7A
    0x05: 0xBA
    0x06: 0x9B
    0x07: 0xDC
    0x08: 0x00
    0x19: 200 (decimal)
    0x1A: 100 (decimal)
    0x1B: 239 (decimal)

    ~~~ Verilog Code ~~~
    dut.mem._memory[0] = 8'b101_11001;  // LDA 25 (Load from addr 25)
    dut.mem._memory[1] = 8'b111_00101;  // JMP 05 (Jump to addr 05)
    dut.mem._memory[2] = 8'b010_11010;  // ADD 26 (Add Accumulator register with value at addr 26)
    dut.mem._memory[3] = 8'b100_11010;  // XOR 26 (Xor Accumulator register with value at addr 26)
    dut.mem._memory[4] = 8'b011_11010;  // AND 26 (And Accumulator register with value at addr 26)
    dut.mem._memory[5] = 8'b101_11010;  // LDA 26 (Load from addr 25)
    dut.mem._memory[6] = 8'b100_11011;  // XOR 27 (Xor Accumulator register with value at addr 27)
    dut.mem._memory[7] = 8'b110_11100;  // STO 28 (Store to addr 28)
    dut.mem._memory[8] = 8'b000_00000;  // HALT

    dut.mem._memory[25] = 8'hc8;        // At 0x19 stores 200
    dut.mem._memory[26] = 8'h64;        // At 0x1A stores 100
    dut.mem._memory[27] = 8'hef;        // At 0x1B stores 239

    // Expected output: "Test Passed: Correct result stored in memory"
    // Output:          "Test Passed: Correct result stored in memory"

-------------------- TC-05 --------------------
| Description: Test while loop with condition |
| SKZ, ADD, JMP, STO, LDA and XOR.            |
-----------------------------------------------
    ~~~ Test machine code ~~~
    LDA 23
    ADD 24
    STO 23
    LDA 20
    ADD 21
    STO 20
    XOR 22
    SKZ
    JMP 00
    HLT
    ~~~ Memory section ~~~
    0x00: 0xB7
    0x01: 0x58
    0x02: 0xD7
    0x03: 0xB4
    0x04: 0x55
    0x05: 0xD4
    0x06: 0x96
    0x07: 0x20
    0x08: 0xE0
    0x09: 0x00
    0x14: 0 (decimal)
    0x15: 1 (decimal)
    0x16: 10 (decimal)
    0x17: 15 (decimal)
    0x18: 16 (decimal)

    ~~~ Verilog Code ~~~
    dut.mem._memory[0] = 8'b101_10111;  // LDA 23 (Load from addr 23)
    dut.mem._memory[1] = 8'b010_11000;  // ADD 24 (XOR value at addr 24 with Accumulator register)
    dut.mem._memory[2] = 8'b110_10111;  // STO 23 (Store Accumulator register to addr 23)
    dut.mem._memory[3] = 8'b101_10100;  // LDA 20 (Load value from address 20)
    dut.mem._memory[4] = 8'b010_10101;  // ADD 21 (Add value from address 21 with Accumulator register)
    dut.mem._memory[5] = 8'b110_10100;  // STO 20 (Store value from Accumulator register to addr 20)
    dut.mem._memory[6] = 8'b100_10110;  // XOR 22 (Xor Accumulator register with value at addr 22)
    dut.mem._memory[7] = 8'b001_00000;  // SKZ    (Check flag is_zero)
    dut.mem._memory[8] = 8'b111_00000;  // JMP 00 (Jump to addr 0)
    dut.mem._memory[9] = 8'b000_00000;  // HLT    (HALT)

    dut.mem._memory[20] = 8'h00;        // At 0x14 stores 0
    dut.mem._memory[21] = 8'h01;        // At 0x15 stores 1
    dut.mem._memory[22] = 8'h0a;        // At 0x16 stores 10
    dut.mem._memory[23] = 8'h0f;        // At 0x17 stores 15
    dut.mem._memory[24] = 8'h10;        // At 0x18 stores 16

    // Expected output: "Test Passed: Correct result stored in memory"
    // Output:          "Test Passed: Correct result stored in memory"

-------------------- TC-06 --------------------
| Description: Test SKZ functionality and     |
| pc_addr value.                              |
-----------------------------------------------
    ~~~ Test machine code ~~~
    SKZ
    SKZ
    SKZ
    SKZ
    SKZ
    SKZ
    SKZ
    SKZ
    HLT
    ~~~ Memory section ~~~
    0x00: 0x20
    0x01: 0x20
    0x02: 0x20
    0x03: 0x20
    0x04: 0x20
    0x05: 0x20
    0x06: 0x20
    0x07: 0x20
    0x08: 0x00

    ~~~ Verilog Code ~~~
    dut.mem._memory[0] = 8'b001_00000;  // SKZ (Check flag is_zero)
    dut.mem._memory[1] = 8'b001_00000;  // ...
    dut.mem._memory[2] = 8'b001_00000;  // ...
    dut.mem._memory[3] = 8'b001_00000;  // ...
    dut.mem._memory[4] = 8'b001_00000;  // ...
    dut.mem._memory[5] = 8'b001_00000;  // ...
    dut.mem._memory[6] = 8'b001_00000;  // ...
    dut.mem._memory[7] = 8'b001_00000;  // ...
    dut.mem._memory[8] = 8'b000_00000;  // HLT (HALT)

    // Expected behavior: 
    // - pc_addr: Jumps from 0x00 -> 0x02, 0x02 -> 0x04, 0x04 -> 0x06, 0x06 -> 0x08
    // - When pc_addr = 0x08, cpu executes HLT instruction then terminates
    // Behavior:
    // - pc_addr: Jumps from 0x00 -> 0x01 and wait for 2 clock cycles then jumps to 0x02 (pc_addr jumps to the expected address at phase STORE, this phase will increment pc_addr because in the ALU_OP state, the CPU will check for SKZ instruction code and flag zero)

-------------------- TC-07 --------------------
| Description: Store and Reload               |
-----------------------------------------------
    ~~~ Test machine code ~~~
    LDA 29
    STO 30
    LDA 31
    STO 30
    LDA 30
    HLT
    ~~~ Memory section ~~~
    0x00: 101_11101
    0x01: 110_11110
    0x02: 101_11111
    0x03: 110_11110
    0x04: 101_11110
    0x05: 000_00000

    0x1D: 55 (decimal)
    0x1E: 99 (decimal)
    0x1F: 101 (decimal)

    ~~~ Verilog Code ~~~
    dut.mem._memory[0]  = 8'b101_11101;  // Load from address 29 to Accumulator
    dut.mem._memory[1]  = 8'b110_11110;  // Store to address 30 from Accumulator
    dut.mem._memory[2]  = 8'b101_11111;  // Load from address 31 to Accumulator
    dut.mem._memory[3]  = 8'b110_11110;  // Store to address 30 from Accumulator
    dut.mem._memory[4]  = 8'b101_11110;  // Load from address 30 to Accumulator
    dut.mem._memory[5]  = 8'b000_00000;  // Halt

    dut.mem._memory[29] = 8'd55;  // At address 30 stores 55
    dut.mem._memory[30] = 8'd99;  // At address 30 stores 99
    dut.mem._memory[31] = 8'd101; // At address 31 stores 101

    // Expected behavior: 
    // - When pc_addr is 0x01, 0x03 and 0x05, inA register in ALU will have the following value: 55d, 101d, 101d
    // - Value stored at address 30 is 101d.
    // Behavior:
    // - Correct behavior

-------------------- TC-08 --------------------
| Description: SKZ Not skipped                |
-----------------------------------------------
    ~~~ Test machine code ~~~
    LDA 29
    SKZ
    XOR 30
    STO 31
    HLT
    ~~~ Memory section ~~~
    0x00: 101_11101
    0x01: 001_00000
    0x02: 100_11110
    0x03: 110_11111
    0x04: 000_00000

    0x1D: 10 (decimal)
    0x1E: 13 (decimal)

    ~~~ Verilog Code ~~~
    dut.mem._memory[0]  = 8'b101_11101;  // Load from address 29 to Accumulator
    dut.mem._memory[1]  = 8'b001_00000;  // Skip 1 instruction if inA is 0
    dut.mem._memory[2]  = 8'b100_11110;  // XOR Accumulator register with address 30
    dut.mem._memory[3]  = 8'b110_11111;  // Store to address 31 from Accumulator
    dut.mem._memory[4]  = 8'b000_00000;  // Halt

    dut.mem._memory[29] = 8'd10;  // At address 29 stores 10
    dut.mem._memory[30] = 8'd13;  // At address 30 stores 13


    // Expected behavior: 
    // - The expected value stored at address 31d is 7d. (0000_1010 ^ 0000_1101 = 0000_0111)
    // Behavior:
    // - Correct result

-------------------- TC-09 --------------------
| Description: ADD overflow                   |
-----------------------------------------------
    ~~~ Test machine code ~~~
    LDA 29
    ADD 30
    STO 31
    HLT
    ~~~ Memory section ~~~
    0x00: 101_11101
    0x01: 010_11110
    0x02: 110_11111
    0x03: 000_00000

    0x1D: 250 (decimal)
    0x1E: 10  (decimal)

    ~~~ Verilog Code ~~~
    dut.mem._memory[0]  = 8'b101_11101;  // Load from address 29 to Accumulator
    dut.mem._memory[1]  = 8'b010_11110;  // Add to address 30 from Accumulator
    dut.mem._memory[2]  = 8'b110_11111;  // Store to address 31 from Accumulator
    dut.mem._memory[3]  = 8'b000_00000;  // Halt

    dut.mem._memory[29] = 8'd250;  // At address 29 stores 250
    dut.mem._memory[30] = 8'd10;   // At address 30 stores 10

    // Expected behavior: 
    // - The expected value stored at address 31d is 4d. (260 is Overflowed)
    // - 260 in binary is 0001_0000_0100b but each register in memory only stores 8 bits => final value 0000_0100b
    // Behavior:
    // - Correct result

-------------------- TC-10 --------------------
| Description: HLT checking behavior          |
-----------------------------------------------
    ~~~ Test machine code ~~~
    LDA 30
    HLT
    ADD 31
    STO 31
    ~~~ Memory section ~~~
    0x00: 0xBE
    0x01: 0x00
    0x02: 0x5F
    0x03: 0xDF
    0x1E: 20 (decimal)
    0x1F: 40 (decimal)

    ~~~ Verilog Code ~~~
    dut.mem._memory[0]  = 8'hbe;  // Load from address 30 to Accumulator
    dut.mem._memory[1]  = 8'h00;  // Stop the program
    dut.mem._memory[2]  = 8'h5f;  // The cpu is expected to stop
    dut.mem._memory[3]  = 8'hdf;  // 
    dut.mem._memory[30] = 8'd20;  // At address 30 stores 20
    dut.mem._memory[31] = 8'd40;  // At address 31 stores 40

    // Expected behavior: 
    // - pc_addr: pc_addr final value is expected to be 0x01
    // - When pc_addr = 0x01, cpu executes HLT instruction then terminates
    // - The value at address 40 remains
    // Behavior:
    // - pc_addr: the cpu stops at the rising edge of 0x02

-------------------- TC-11 --------------------
| Description: Multiple consecutive JMP       |
-----------------------------------------------
    ~~~ Test machine code ~~~
    JMP 3
    LDA 29
    JMP 5
    JMP 6
    HLT
    LDA 30
    LDA 31
    HLT
    ~~~ Memory section ~~~
    0x00: 111_00011
    0x01: 101_11101
    0x02: 111_00010
    0x03: 111_00110
    0x04: 000_00000
    0x05: 101_11110
    0x06: 101_11111
    0x07: 000_00000
    
    0x1D: 10 (decimal)
    0x1E: 20 (decimal)
    0x1F: 88 (decimal)

    ~~~ Verilog Code ~~~
    dut.mem._memory[0] = 8'b111_00011;  // Jump to address 3
    dut.mem._memory[1] = 8'b101_11101;  // Load from address 29 to Accumulator
    dut.mem._memory[2] = 8'b111_00010;  // Jump to address 5
    dut.mem._memory[3] = 8'b111_00110;  // Jump to address 6
    dut.mem._memory[4] = 8'b000_00000;  // Halt
    dut.mem._memory[5] = 8'b101_11110;  // Load from address 30 to Accumulator
    dut.mem._memory[6] = 8'b101_11111;  // Load from address 31 to Accumulator
    dut.mem._memory[7] = 8'b000_00000;  // Halt

    dut.mem._memory[29] = 8'd10;  // At address 29 stores value 10
    dut.mem._memory[30] = 8'd20;  // At address 30 stores value 20
    dut.mem._memory[31] = 8'd88;  // At address 31 stores value 88

    // Expected behavior:
    // - The inA of ALU block stores 88 decimal
    // - The pc_addr will jump from 0x00 -> 0x03 -> 0x06 -> 0x07 and terminate
    // Behavior:
    // - Correct behavior

-------------------- TC-12 --------------------
| Description: Test to see if Accumulator Reg |
| still holds value                           |
-----------------------------------------------
    ~~~ Test machine code ~~~
    LDA 29
    STO 30
    STO 31
    HLT
    ~~~ Memory section ~~~
    0x00: 101_11101
    0x01: 110_11110
    0x02: 110_11111
    0x03: 000_00000
    
    0x1D: 10 (decimal)

    ~~~ Verilog Code ~~~
    dut.mem._memory[0] = 8'b101_11101;  // Load from address 29
    dut.mem._memory[1] = 8'b110_11110;  // Store to address 30
    dut.mem._memory[2] = 8'b110_11111;  // Store to address 31
    dut.mem._memory[3] = 8'b000_00000;  // Halt

    dut.mem._memory[29] = 8'd10;  // At address 29 stores value 10
    dut.mem._memory[30] = 8'd30;  // At address 30 stores value 30

    // Expected behavior:
    // - The inA of ALU block stores 10 (decimal) through 2 instructions
    // - The value at address 30 will be changed to 10
    // Behavior:
    // - Correct behavior

-------------------- TC-13 --------------------
| Description: Full Instruction Coverage      |
-----------------------------------------------
    ~~~ Test machine code ~~~
    LDA 27
    ADD 28
    AND 29
    XOR 30
    STO 31
    LDA 25
    SKZ 
    ADD 31
    JMP 10
    LDA 31
    HLT
    ~~~ Memory section ~~~
    0x00: 101_11011
    0x01: 010_11100
    0x02: 011_11101
    0x03: 100_11110
    0x04: 110_11111
    0x05: 101_11001
    0x06: 001_00000
    0x07: 010_11111
    0x08: 111_01010
    0x09: 101_11111
    0x0A: 000_00000

    0x1B: 10 (decimal)
    0x1C: 20 (decimal)
    0x1D: 30 (decimal)
    0x1E: 40 (decimal)

    ~~~ Verilog Code ~~~
    dut.mem._memory[0]  = 8'b101_11011;  // Load from address 27
    dut.mem._memory[1]  = 8'b010_11100;  // Add with address 28
    dut.mem._memory[2]  = 8'b011_11101;  // And with address 29
    dut.mem._memory[3]  = 8'b100_11110;  // Xor with address 30
    dut.mem._memory[4]  = 8'b110_11111;  // Store to address 31
    dut.mem._memory[5]  = 8'b101_11001;  // Load from address 25
    dut.mem._memory[6]  = 8'b001_00000;  // Skip next instruction if inA is 0
    dut.mem._memory[7]  = 8'b010_11111;  // Add with value in address 31
    dut.mem._memory[8]  = 8'b111_01010;  // Jump to address 10
    dut.mem._memory[9]  = 8'b101_11111;  // Load value stored in address 31
    dut.mem._memory[10] = 8'b000_00000;  // Halt

    dut.mem._memory[27] = 8'd10;  // At address 27 stores value 10
    dut.mem._memory[28] = 8'd20;  // At address 28 stores value 20
    dut.mem._memory[29] = 8'd30;  // At address 29 stores value 30
    dut.mem._memory[30] = 8'd40;  // At address 30 stores value 40

    // Expected behavior:
    // - At address 25 doesn't initiate any value, so the expected value is x.
    // - The expected result at address 31 is: 54.
    // - In theory, the instruction at address 0x07 shouldn't be skipped.
    // - Instruction at address 9 will not be executed.
    // - inA of ALU will be x because the value at address 25 is undefined and any number add with x is x.
    // Behavior:
    // - Correct behavior

-------------------- TC-14 --------------------
| Description: Reset to Zero Acc              |
-----------------------------------------------
    ~~~ Test machine code ~~~
    LDA 30
    XOR 30
    SKZ
    LDA 31
    HLT
    ~~~ Memory section ~~~
    0x00: 101_11110
    0x01: 100_11110
    0x02: 001_00000
    0x03: 101_11111
    0x04: 000_00000

    0x1E: 23 (decimal)
    0x1F: 9  (decimal)

    ~~~ Verilog Code ~~~
    dut.mem._memory[0]  = 8'b101_11110;  // Load from address 30
    dut.mem._memory[1]  = 8'b100_11110;  // Xor with address 30
    dut.mem._memory[2]  = 8'b001_00000;  // Skipp if inA is 0
    dut.mem._memory[3]  = 8'b101_11111;  // Load from address 31
    dut.mem._memory[4]  = 8'b000_00000;  // Halt

    dut.mem._memory[30] = 8'd23;    // Address 30 stores 23
    dut.mem._memory[31] = 8'd9;     // Address 31 stores 9

    // Expected behavior:
    // - The CPU loads 23 from address 30 to Accumulator.
    // - The CPU calculates 23 ^ 9 = 0 and stores it to inA.
    // - SKZ detects zero flag and the CPU skips the next instruction.
    // - The CPU stops executing.
    // Behavior:
    // - The pc_addr did store address 0x03. However the cpu didn't execute the instruction, this can be verify by checking the opcode of the CPU.
    // - Overall behavior is valid.

-------------------- TC-15 --------------------
| Description: Checking memory at intial state|
-----------------------------------------------
    ~~~ Verilog Code ~~~
    integer i;
    initial begin
        for(i=0; i<32; i = i + 1) begin
            $display("Address %d:%d", i, dut.mem._memory[i]);
        end
    end

    // Expected behavior:
    // - Every memory block should be x
    // Behavior
    // - Every memory block is x at intial state.

-------------------- TC-16 --------------------
| Description: Checking initial value of inA  |
-----------------------------------------------
    ~~~ Test machine code ~~~
    STO 30
    HLT
    ~~~ Memory section ~~~
    0x00: 110_11110
    0x01: 000_00000

    ~~~ Verilog Code ~~~
    dut.mem._memory[0]  = 8'b110_11110;  // Store value from inA to address 30
    dut.mem._memory[1]  = 8'b000_00000;  // CPU stop executing

    // Expected behavior:
    // - The CPU stores the current value in inA(expected to be 0) to address 30 (decimal)
    // - At address 30, the stored value will change from x to 0 (decimal)
    // - The CPU stops executing.
    // Behavior:
    // - The CPU behaved as expected

-------------------- TC-17 --------------------
| Description: Test AND with value x          |
-----------------------------------------------
    ~~~ Test machine code ~~~
    LDA 30
    AND 31
    HLT
    ~~~ Memory section ~~~
    0x00: 101_11110
    0x01: 011_11111
    0x02: 000_00000

    0x1E: 8'haa
    ~~~ Verilog Code ~~~
    dut.mem._memory[0] = 8'b101_11110;  // Load value from address 30 to inA
    dut.mem._memory[1] = 8'b011_11111;  // And 1010_1010b with x in address 31
    dut.mem._memory[2] = 8'b000_00000;  // CPU stop executing

    dut.mem._memory[30] = 8'haa;    // At address 30 stores 1010_1010b

    // Expected behavior:
    // - The CPU loads the value stored at address 30 to Accumulator
    // - The CPU executes AND 1010_1010b with x in address 31
    // - The expected result is: x0x0_x0x0b
    // - The CPU stops executing.
    // Behavior:
    // - The CPU behaved as expected

-------------------- TC-17 --------------------
| Description: No instruction test            |
-----------------------------------------------
    ~~~ Test machine code ~~~
    null

    // Expected behavior:
    // - The CPU run indefinitely
    // Behavior: 
    // - When no instructions are allocated, the CPU reads the opcode as xxx which is undefined, so no calculations are made.
    // - The CPU still runs through 8 states.
    // - The program counter increment continously, this happens because the program counter is a 5 bits register, so whenever the program counter reaches the value 31, it will return to 0 because the limit is 5 bits and we already know 31 is 11111 in binary.

-------------------- TC-18 --------------------
| Description: 
-----------------------------------------------
